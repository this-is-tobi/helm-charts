# -- Provide a name in place of the default application name.
nameOverride: ""
# -- String to fully override the default application name.
fullnameOverride: ""

# Image credentials configuration.
imageCredentials:
  # -- Registry to pull images from.
  registry: ""
  # -- Username to pull images.
  username: ""
  # -- Password to pull images.
  password: ""
  # -- Email to pull images.
  email: ""

# Global configuration.
global:
  # -- Map of environment variables to inject into backend and frontend containers.
  env: {}
  # -- Map of environment variables to inject into backend and frontend containers.
  secrets: {}

# App configuration.
app:
  # -- The number of application controller pods to run.
  replicaCount: 1
  ## App image.
  image:
    # -- Repository to use for the app.
    repository: "docker.io/debian"
    # -- Image pull policy for the app.
    pullPolicy: "Always"
    # -- Tag to use for the app.
    ## Overrides the image tag whose default is the chart appVersion.
    tag: ""
  ## Ingress configuration.
  ingress:
    # -- Whether or not ingress should be enabled.
    enabled: true
    # -- Defines which ingress controller will implement the resource.
    className: ""
    # -- Additional ingress annotations.
    annotations: {}
    # -- Additional ingress labels.
    labels: {}
    # -- The list of hosts to be covered by ingress record.
    hosts:
    - "domain.local"
    # -- Enable TLS configuration.
    tls: []
    # - secretName: domain.local-tls
    #   hosts:
    #   - domain.local
  # -- Annotations for the app deployed pods.
  podAnnotations: {}
  # -- Labels for the app deployed pods.
  podLabels: {}
  # -- Toggle and define pod-level security context.
  podSecurityContext: {}
    # fsGroup: 2000
  # -- Init containers to add to the app pod.
  initContainers: []
  # - name: wait-for-keycloak
  #   image: docker.io/curlimages/curl:latest
  #   command:
  #   - "/bin/sh"
  #   - "-c"
  #   args:
  #   - "while [ $(curl -sw '%{http_code}' http://webapp.svc.cluster.local -o /dev/null) -ne 200 ]; do sleep 5; echo 'Waiting for the webapp...'; done"
  #   volumeMounts:
  #   - mountPath: /custom-volume
  #     name: custom-volume
  container:
    # -- app container port.
    port: 8080
    # -- app container command.
    command: []
    # -- app container command args.
    args: []
    # -- Toggle and define container-level security context.
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
  # -- Extra containers to add to the app pod as sidecars.
  extraContainers: []
  # - name: fluentd
  #   image: "fluentd"
  #   volumeMounts:
  #     - mountPath: /my-volume/config
  #       name: config
  # -- app container env variables loaded from configmap or secret reference.
  envFrom: []
  # - configMapRef:
  #     name: my-config
  # - secretRef:
  #     name: my-secret
  # -- app container env variables, it will be injected into a configmap and loaded into the container.
  env: {}
  # -- app container env secrets, it will be injected into a secret and loaded into the container.
  secrets: {}
  # -- app container healthcheck endpoint.
  healthcheckPath: "/"
  ## Deployment strategy for CPN app deployment.
  strategy:
    # -- Strategy type used to replace old Pods by new ones, can be "Recreate" or "RollingUpdate".
    type: "RollingUpdate"
  ## Startup probe for app.
  startupProbe:
    # -- Whether or not enable the probe.
    enabled: true
    # -- Number of seconds after the container has started before probe is initiated.
    initialDelaySeconds: 0
    # -- Minimum consecutive successes for the probe to be considered successful after having failed.
    successThreshold: 1
    # -- Minimum consecutive failures for the probe to be considered failed after having succeeded.
    failureThreshold: 10
    # -- How often (in seconds) to perform the probe.
    periodSeconds: 10
    # -- Number of seconds after which the probe times out.
    timeoutSeconds: 5
  ## Readiness probe for app.
  readinessProbe:
    # -- Whether or not enable the probe.
    enabled: true
    # -- Number of seconds after the container has started before probe is initiated.
    initialDelaySeconds: 15
    # -- Minimum consecutive successes for the probe to be considered successful after having failed.
    successThreshold: 2
    # -- Minimum consecutive failures for the probe to be considered failed after having succeeded.
    failureThreshold: 2
    # -- How often (in seconds) to perform the probe.
    periodSeconds: 10
    # -- Number of seconds after which the probe times out.
    timeoutSeconds: 5
  ## Liveness probe for app.
  livenessProbe:
    # -- Whether or not enable the probe.
    enabled: true
    # -- Whether or not enable the probe.
    initialDelaySeconds: 30
    # -- Number of seconds after the container has started before probe is initiated.
    successThreshold: 1
    # -- Minimum consecutive successes for the probe to be considered successful after having failed.
    failureThreshold: 3
    # -- Minimum consecutive failures for the probe to be considered failed after having succeeded.
    periodSeconds: 30
    # -- How often (in seconds) to perform the probe.
    timeoutSeconds: 5
  # -- Host aliases that will be injected at pod-level into /etc/hosts.
  hostAliases: []
  # - ip: "127.0.0.1"
  #   hostnames:
  #   - "foo.local"
  #   - "bar.local"
  # - ip: "10.1.2.3"
  #   hostnames:
  #   - "foo.remote"
  #   - "bar.remote"
  # -- List of extra volumes to add.
  extraVolumes: []
  # - name: extra-vol
  #   path: /host/path
  #   type: hostPath
  # - name: extra-vol-cm
  #   type: configMap
  # -- List of extra mounts to add (normally used with extraVolumes)
  extraVolumeMounts: []
  # - name: extra-vol
  #   mountPath: /volume/path
  # - name: extra-vol-cm
  #   mountPath: /volume/cm/path
  service:
    # -- app service type.
    type: "ClusterIP"
    # -- app service port.
    port: 80
  resources:
    requests:
      # -- Memory request for the app.
      memory: "256Mi"
      # -- CPU request for the app.
      cpu: "100m"
    limits:
      # -- Memory limit for the app.
      memory: "2Gi"
      # -- CPU limit for the app.
      cpu: "500m"
  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the app.
    enabled: false
    # -- Minimum number of replicas for the app [HPA].
    minReplicas: 1
    # -- Maximum number of replicas for the app [HPA].
    maxReplicas: 3
    # -- Average CPU utilization percentage for the app [HPA].
    targetCPUUtilizationPercentage: 80
    # -- Average memory utilization percentage for the app [HPA].
    targetMemoryUtilizationPercentage: 80
  # -- Default node selector for app.
  nodeSelector: {}
  # -- Default tolerations for app.
  tolerations: []
  # -- Default affinity for app.
  affinity: {}
    # App configuration.
  serviceAccount:
    # -- Create a service account for the API.
    create: false
    # -- Annotations applied to created service account.
    annotations: {}
    # -- Service account name.
    name: "app-sa"

# Keycloak configuration.
## Ref: https://artifacthub.io/packages/helm/bitnami/keycloak
# keycloak:
#   enabled: false
#   nameOverride: "keycloak"
#   auth:
#     adminUser: ""
#     adminPassword: ""
#   ingress:
#     enabled: true
#     ingressClassName: ""
#     annotations: {}
#     hostname: "keycloak.domain.local"
#     path: "/"
#     tls: false
#     secrets: []
#   production: true
#   proxy: "edge"
#   tls:
#     enabled: false
#     autoGenerated: false
#   postgresql:
#     nameOverride: "keycloak-db"
#     enabled: true
#     auth:
#       postgresPassword: ""
#       username: ""
#       password: ""
#       database: "keycloak"
#       architecture: "standalone"
